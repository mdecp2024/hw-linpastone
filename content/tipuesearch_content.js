var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:\xa0 fqpabi8 \n 個人倉儲:  https://github.com/mdecp2024/hw-linpastone-41323217 \n 個人網站:  https://mdecp2024.github.io/hw-linpastone-41323217 \n \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': '加入brython', 'text': '如何將brython加入至網頁 \n \n', 'tags': '', 'url': '加入brython.html'}, {'title': '影片貼上網頁流程', 'text': '\n', 'tags': '', 'url': '影片貼上網頁流程.html'}, {'title': '虛擬機建置流程', 'text': '虛擬機的建置流程 \n 組合包：  https://drive.google.com/drive/folders/1vXSrHQlOAXe7vfs5PQI2iAqmGmh60vAE?usp=drive_link \n \n \n', 'tags': '', 'url': '虛擬機建置流程.html'}, {'title': 'w10', 'text': "題目一： \n 操作概要： 這部影片中使用了五種不同的方式去執行金字塔程式，模擬了在不同環境下去執行的方式與輸出的結果 心得： 在過程中我發現執行一個程式不是只有一種方法，各種模式有不同的優缺點，但是在用jupyter的過程我發現會報錯，應該是解壓縮不完全回去再試試看 \n \n \n 題目二： \n １. 只能包含字母、數字和底線 _ ：變數名稱只能包含 a-z 、 A-Z 、 0-9 和 _ ，不能包含空格或其他符號。 \n \xa0 \xa0 大小寫敏感 ：Python是大小寫敏感的語言， myVariable 並且 myvariable 是兩個不同的變數名稱。 \n \xa0 \xa0  不得以數字開頭 ：變數中後可有數字，但不得做為開頭。 \n \n 2.避免 使用Python關鍵字 if ：關鍵字（keywords）是Python語言保留的單詞，具有特殊意義，不能作為變數名稱。 \n \n \n 題目三： \n \n \n \n 以下方程式列印採用  Mathjax Version 3 格式 . \n \n set1 - Physics \n Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway. \n To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration. \n Step 1: Problem Breakdown \n We are given: - Initial velocity \\( v_0 = 310 \\, \\text{km/h} \\) - Final velocity \\( v = 0 \\, \\text{m/s} \\) (since the jet stops) - Distance \\( d = 1000 \\, \\text{m} \\) \n We are asked to find the constant acceleration \\( a \\) that brings the jet to a stop. \n Step 2: Kinematic Equation \n The appropriate kinematic equation for this problem, where the object is decelerating (i.e., stopping), is: \n \\[ v^2 = v_0^2 + 2ad \\] \n Where: - \\( v \\) is the final velocity (which is 0 since the jet stops), - \\( v_0 \\) is the initial velocity, - \\( a \\) is the constant acceleration (which we need to solve for), - \\( d \\) is the distance traveled. \n Step 3: Solving for Acceleration \\( a \\) \n Rearranging the equation to solve for \\( a \\): \n \\[ a = \\frac{v^2 - v_0^2}{2d} \\] \n Since \\( v = 0 \\), this simplifies to: \n \\[ a = \\frac{-v_0^2}{2d} \\] \n Step 4: Converting Units \n The velocity \\( v_0 = 310 \\, \\text{km/h} \\) needs to be converted to meters per second (m/s) because the distance is in meters and we want the acceleration in meters per second squared (m/s²). \n \\[ v_0 = 310 \\, \\text{km/h} = \\frac{310 \\times 1000}{3600} \\, \\text{m/s} = 86.11 \\, \\text{m/s} \\] \n Step 5: Substituting Known Values \n Now we can substitute the values into the equation: \n \\[ a = \\frac{-(86.11)^2}{2 \\times 1000} \\] \n Let's calculate this using Python. \n Python Code Implementation:  problem-set1-1.py \n \n Use function to solve this kind of problem.  problem-set1-2.py \n Extend to be more general to solve all kind of these problems.  problem-set1-3.py \n set2- Calculus \n Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ? \n We are asked to determine when a bacteria population, starting at 100 bacteria, will first reach 50,000, given that the population doubles every 3 hours. \n Exponential Growth Equation: \n The population growth can be modeled by the exponential growth formula: \n \\[ P(t) = P_0 \\times 2^{\\frac{t}{T}} \\] \n Where: - \\( P(t) \\) is the population at time \\( t \\), - \\( P_0 \\) is the initial population, - \\( T \\) is the doubling time (in hours), - \\( t \\) is the time elapsed (in hours). \n Given: - \\( P_0 = 100 \\) (initial population), - \\( T = 3 \\) hours (doubling time), - \\( P(t) = 50,000 \\) (target population). \n Step 1: Plugging in the known values \n We want to find the time \\( t \\) when the population reaches 50,000. Substituting the known values into the growth equation: \n \\[ 50,000 = 100 \\times 2^{\\frac{t}{3}} \\] \n Step 2: Simplifying the equation \n First, divide both sides by 100 to isolate the exponential term: \n \\[ 500 = 2^{\\frac{t}{3}} \\] \n Step 3: Solving for \\( t \\) \n To solve for \\( t \\), take the logarithm (base 2) of both sides of the equation: \n \\[ \\log_2(500) = \\frac{t}{3} \\] \n Now, multiply both sides by 3 to solve for \\( t \\): \n \\[ t = 3 \\times \\log_2(500) \\] \n Step 4: Change of Base Formula \n To compute \\( \\log_2(500) \\) in Python or any other programming language, we can use the change of base formula: \n \\[ \\log_2(x) = \\frac{\\log_{10}(x)}{\\log_{10}(2)} \\] \n Thus, the equation for \\( t \\) becomes: \n \\[ t = 3 \\times \\frac{\\log_{10}(500)}{\\log_{10}(2)} \\] \n Python Code to Calculate \\( t \\):  problem-set2-1.py \n \n \n", 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n 標記 \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答:" *"字號圓形 \n import math\n\n# 定義區域大小和圓心\nsize = 10\nradius = size // 2\ncenter = radius - 0.5  # 圓心位置調整到中心\n\n# 產生 10x10 的字元區域\nfor y in range(size):\n    for x in range(size):\n        # 計算該點是否在圓的範圍內\n        distance = math.sqrt((x - center) ** 2 + (y - center) ** 2)\n        if distance <= radius:\n            print("＊", end="")\n        else:\n            print("\u3000", end="")\n    print()  # 換行\n \n \n \n \n \n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答： 網頁上的方格與塗色 \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# canvas context\nctx = canvas.getContext("2d")\n\n# 定義繪製矩形的函數\ndef dRect(lux, luy, w, h, s=1, c="lightgrey"):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\n# 繪製網格\ndef grid(width, height, grid_pix):\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\n# 填滿指定格子\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect((x - 1) * gs, (y - 1) * gs, gs, gs)\n\n# 判斷是否在圓形範圍內\ndef is_in_circle(cx, cy, x, y, r):\n    return ((x - cx) ** 2 + (y - cy) ** 2) <= r ** 2\n\n# 圓形繪製\ndef draw_circle(grid_size, radius):\n    center = (grid_size // 2) + 0.5  # 圓心位於中心\n    for i in range(1, grid_size + 1):\n        for j in range(1, grid_size + 1):\n            # 檢查格子中心點是否在圓內\n            if is_in_circle(center, center, i, j, radius):\n                fill(i, j, "black")\n\n# 主程式\ngrid(10, 10, gs)\ndraw_circle(10, 5)  # 圓的半徑為 4.5\n \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n 超級圓： \n 超級圓 \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=5000, height=5000)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 1\n\n# canvas context\nctx = canvas.getContext("2d")\n\n# 定義繪製矩形的函數\ndef dRect(lux, luy, w, h, s=1, c="lightgrey"):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\n# 繪製網格\ndef grid(width, height, grid_pix):\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\n# 填滿指定格子\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect((x - 1) * gs, (y - 1) * gs, gs, gs)\n\n# 判斷是否在圓形範圍內\ndef is_in_circle(cx, cy, x, y, r):\n    return ((x - cx) ** 2 + (y - cy) ** 2) <= r ** 2\n\n# 圓形繪製\ndef draw_circle(grid_size, radius):\n    center = (grid_size // 2) + 0.5  # 圓心位於中心\n    for i in range(1, grid_size + 1):\n        for j in range(1, grid_size + 1):\n            # 檢查格子中心點是否在圓內\n            if is_in_circle(center, center, i, j, radius):\n                fill(i, j, "black")\n\n# 主程式\ngrid(800, 800, gs)\ndraw_circle(800, 400)  # 圓的半徑為 4.5 \n 簡報流程心得 \n \n 周昀融 設計的  程式設計簡報 \n 11/27  程式 \n n=11 \nspace=\'_\'\ncenter=n//2\n#print(center)\n\nfor y in range(n):\n        for x in range(n):\n            print("(", x, ", ", y, ")", sep="") \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '第一題：input()與 print() \n input()範例程式： 你叫啥 \n \xa0 \xa0 說明：input為輸入()中為問題,使用者輸入之答案會變成返回的值 \n input("你叫啥") \n \n print()範例程式： 貓貓 \n \xa0 \xa0 說明： print是打印的指令,如果用以下的執行出來會出現一隻小貓(Bython執行會歪掉,所以有補償空格) \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___") \n 第二題：變數 \n Q2-1範例程式： 姓名 \n \xa0 \xa0 說明：設定變數後,可以使用列印指令,列印出不同變數 \n first_name = "chou" #變數first_name為"自己的姓"\nlast_name  = "ryan" #變數last_name為"自己的名"\nprint (first_name) #列印變數first_name\nprint (last_name) #列印變數last_name \n Q2-2範例程式： 名子+喜歡的食物 \n \xa0 \xa0 說明：使用input指令跳出詢問窗,再 使用回傳的數值與字串進行合併 \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值) \n 第三題：if判斷式 \n Q3範例程式： 書店 \n \xa0 \xa0 說明：使用if判斷式判斷使用者輸入之數值(文字)是否在字串當中 \n programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串\nprint (programming_books) #列印programming_books變數(會出現三個字串)\nwanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值\nprint (wanted_book) #列印wanted_book變數\nif wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中\n    print ("Yes, we sell it!")       #列印 是的我們有販賣\nelse:                            #反之    \n    print ("Sorry, we don\'t sell that book") #列印 抱歉我們沒有販賣  \n 第四題：append()和remove() \n Q4範例程式： 購物清單 \n \xa0 \xa0 說明：使用append()進行加入接著使用remove()移除清單內無需購買之物品 \n \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n\nif new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n    print (shopping_list) #列印shopping_list字串\nelse:                    #反之\n    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單\n    print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n\nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n    print (shopping_list) #列印購物清單\nelse:                     #反之\n    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n    print (shopping_list) #列印購物清單 \n 第五題：index().pop()和insert() \n \xa0 \xa0 說明：index()用於從列表中找出某個述職的位置 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0pop()用於將列標表中的元素移除(默認為最後一個) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0insert用於將字串插入 \n Q5範例程式： 今日菜單 \n todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"\nside_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index) #列印side_dish_index  列印他在第幾位\ntodays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條\nprint (todays_menu) #列印今日菜單 \n 第六題：切片取值 \n \xa0 \xa0 說明： [star:end:step][起點:終點:步長] \n Q6範例程式： 城市 \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #變數城市=以下字串\nprint (cities) #列印 (城市)\nprint (cities[1]) #列印 (城市 [1])    由於程式是由0開始計算 所以第一個會是Prague\nprint (cities[1:4]) #列印 (城市 [1:4]) 列印出來會是[\'Prague\', \'Cape Town\', \'Tokyo\'] 由於執行到4就停止了所以只有三個\nprint (cities[1:4:2]) #列印 城市 [1:4:2]) 列印出來會是[\'Prague\', \'Tokyo\'] 因為步數設定為2 程式執行會把1~4由左至右一次跳過兩個進行輸出\nprint (cities[0:3]) #列印 城市 [0:3]) 列印出來會是[\'San Diego\', \'Prague\', \'Cape Town\'] 這次是從0開始計算\nprint (cities[:3]) #列印 城市 [:3]) 列印出來會是[\'San Diego\', \'Prague\', \'Cape Town\'] 由於未輸入數值,默認為0\nprint (cities[2:5]) #列印 城市 [2:5]) 列印出來會是 [\'Cape Town\', \'Tokyo\', \'Melbourne\'] 從2~5\nprint (cities[2:]) #列印 城市 [2:]) 列印出來會是 [\'Cape Town\', \'Tokyo\', \'Melbourne\'] 如果結束未輸入默認為列表的長度之值\nprint (cities[0:5:2]) #列印 城市 [0:5:2]) 列印出來會是[\'San Diego\', \'Cape Town\', \'Melbourne\'] 程式執行會把0~5由左至右一次跳過兩個進行輸出\nprint (cities[::2]) #列印 城市 [::2]) 列印出來會是 [\'San Diego\', \'Cape Town\', \'Melbourne\'] 未輸入開始會默認0終點會默認列表的長度\nprint (cities[4]) #列印 城市 [4]) 列印出來會是 Melbourne \nprint (cities[-1]) #列印 城市 [-1]) 列印出來會是 Melbourne -值會倒退計算 "含前不含後"\nprint (cities[-4:-1]) #列印 城市 [-4:-1]) 列印出來會是 [\'Prague\', \'Cape Town\', \'Tokyo\']\ncities[3:0:-1] #這個是切片操作 如果列印出來會是 [\'Tokyo\', \'Cape Town\', \'Prague\']\ncities[-2:-5:-1] #這個是切片操作 如果列印出來會是 [\'Tokyo\', \'Cape Town\', \'Prague\']\nprint (cities[::-1]) #列印 城市 [::-1]) [\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Diego\'] \n \xa0 \n \n \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n W13 上課題目\xa0 重疊方形 \n from browser import html #導入html函式庫\nfrom browser import document as doc #導入document程式庫並在程式中命名(簡寫)為doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400) #將變數canvas指定為html.CANVAS(width = 400,height = 400) \n#意思是建立*(準備)一個400*400的空間(畫布)\nbrython_div = doc["brython_div1"] #將變數brython_div指定為doc["brython_div1"]\nbrython_div <= canvas #將canve指定為子元素加入倒brython_div中\n\n# 每一格的 pixel 數\ngs = 200 \n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d") #將ctx指定(簡寫)為canvas.getContext("2d") (獲取畫布（canvas）的 2D 繪圖上下文 (context))\nwidth=1 #方形的寬\nheight=1 #方形的高\n\n#第一個方形\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n     \n#第二個偏移的方形\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs+100,j*gs+100,gs,gs)      #gs+100代表往右下偏移100像素\n     ctx.stroke(); \n \n \n \n \n \n \n \n \n \n \n Brython Embedded Example \n \n  定義畫布的容器  \n \n  嵌入 Brython 程式碼  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心和半徑\nx1, y1 = 200, 200  # 第一個圓的圓心\nx2, y2 = 300, 300  # 第二個圓的圓心\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# === 繪製第一個圓 ===\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\n\n# === 繪製重疊區域 (黑色交集區塊) ===\nctx.save()  # 保存繪圖狀態\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 限制繪圖範圍為第一個圓\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\nctx.restore()  # 恢復繪圖狀態\n\n# === 填充第一個圓其他區域 ===\n# 填充左半部分 (紅色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)\nctx.closePath()\nctx.fillStyle = "red"\nctx.fill()\n\n# 填充上半部分 (藍色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n\n# 填充左下部分 (紫色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "purple"\nctx.fill()\n\n# === 填充第二個圓區域 ===\n\n# 填充右上部分 (粉色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "pink"\nctx.fill()\n\n# 填充右下部分 (灰色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)\nctx.closePath()\nctx.fillStyle = "gray"\nctx.fill()\n\n# 填充下半部分 (綠色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "green"\nctx.fill()\n\n# === 繪製輔助框架與對角線 ===\n# 繪製兩個圓的邊框\nctx.lineWidth = 2\nctx.strokeStyle = "black"\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.stroke()\n\n# 繪製正方形框架\nctx.lineWidth = 2\nctx.strokeStyle = "red"\n\n# 第一個正方形\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.stroke()\nctx.fillStyle = "green"  # 填充顏色\nctx.fill()\n# 第二個正方形\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.stroke()\nctx.fillStyle = "blue"  # 填充顏色\nctx.fill()\n# 繪製對角線\nctx.lineWidth = 2\nctx.strokeStyle = "blue"\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.stroke()\n\n\n\n# 繪製第一個圓\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\n\n# 設置合成模式為 "source-in"（只保留交集部分）\nctx.globalCompositeOperation = "source-in"\n\n# 繪製第二個圓\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\n\n# 恢復繪製狀態\nctx.restore()\n\n \n w13  作業 \n  嵌入 Brython 程式碼  \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '1211上課程式： 程式 \n from browser import document, html\nimport math\n\n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n\nsetup_canvas()\n\n# 判斷點 (x, y) 是否在圓內，圓的圓心為 (cx, cy)，半徑為 r\ndef is_inside_circle(x, y, cx, cy, r):\n    distance = math.sqrt((x - cx) ** 2 + (y - cy) ** 2)\n    return distance <= r\n\n# 繪製圓\ndef draw_circle(ctx, cx, cy, r):\n    ctx.beginPath()\n    ctx.arc(cx, cy, r, 0, 2 * math.pi)\n    ctx.stroke()\n\n# 獲取 canvas 上下文\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n\n# 用戶輸入三個圓的圓心座標和半徑\ncircle1_center_x = float(input("輸入第一個圓的圓心 x 座標: "))\ncircle1_center_y = float(input("輸入第一個圓的圓心 y 座標: "))\ncircle1_radius = float(input("輸入第一個圓的半徑: "))\n\ncircle2_center_x = float(input("輸入第二個圓的圓心 x 座標: "))\ncircle2_center_y = float(input("輸入第二個圓的圓心 y 座標: "))\ncircle2_radius = float(input("輸入第二個圓的半徑: "))\n\ncircle3_center_x = float(input("輸入第三個圓的圓心 x 座標: "))\ncircle3_center_y = float(input("輸入第三個圓的圓心 y 座標: "))\ncircle3_radius = float(input("輸入第三個圓的半徑: "))\n\n# 繪製三個圓\ndraw_circle(ctx, circle1_center_x, circle1_center_y, circle1_radius)\ndraw_circle(ctx, circle2_center_x, circle2_center_y, circle2_radius)\ndraw_circle(ctx, circle3_center_x, circle3_center_y, circle3_radius)\n\n# 遍歷一定範圍的點來確定所屬區域並著色\nwidth = canvas.width\nheight = canvas.height\nfor x in range(0, width, 5):\n    for y in range(0, height, 5):\n        in_circle1 = is_inside_circle(x, y, circle1_center_x, circle1_center_y, circle1_radius)\n        in_circle2 = is_inside_circle(x, y, circle2_center_x, circle2_center_y, circle2_radius)\n        in_circle3 = is_inside_circle(x, y, circle3_center_x, circle3_center_y, circle3_radius)\n\n        if in_circle1 and in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "purple"  # 三個圓重疊區域設為紫色\n            ctx.fill()\n        elif in_circle1 and in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "blue"  # 僅在圓1、圓2重疊（不含圓3重疊部分）區域設為藍色\n            ctx.fill()\n        elif in_circle1 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "green"  # 僅在圓1、圓3重疊（不含圓2重疊部分）區域設為綠色\n            ctx.fill()\n        elif in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "yellow"  # 僅在圓2、圓3重疊（不含圓1重疊部分）區域設為黃色\n            ctx.fill()\n        elif in_circle1:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "cyan"  # 僅在圓1內（不含和其他圓重疊部分）區域設為青色\n            ctx.fill()\n        elif in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "magenta"  # 僅在圓2內（不含和其他圓重疊部分）區域設為品紅\n            ctx.fill()\n        elif in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "orange"  # 僅在圓3內（不含和其他圓重疊部分）區域設為橙色\n            ctx.fill()\n        else:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "gray"  # 三個圓外的區域設為灰色\n            ctx.fill()\n \n #運算程式\ndef addto(start, end):   #定義函數addto\n    sum_result = 0       #設定數值sum_result=0\n    i = start            #設定i=start\n    while i <= end:      #設結束之值為end\n        sum_result += i  \n        i += 1\n    return sum_result    #終止函數運行並返回數值至result\n    \n#調用程式\nresult = addto(1, 100)   #設定起始值\nprint(result)            #列印result 範例程式 sum_result = 0 #建立變數sum_result\ni = 1 #指定i等於1\nwhile i <= 100:     #使用while迴圈把i加到等於100\n    sum_result += i   \n    i += 1\nprint(sum_result)', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': "\n 第一題：1~100 \n \u3000\u3000我是使用while迴圈下去寫，邏輯大概是如果i小於100就持續執行1+2=3 3+4=7一直持續到i=100。 \n sum_result = 0 #建立變數sum_result\ni = 1 #指定i等於1\nwhile i <= 100:     #使用while迴圈把i加到等於100\n    sum_result += i   \n    i += 1\nprint(sum_result) \n 1~100 \n 第二題：指定開頭計算 \n \u3000\u3000我一樣使用while迴圈下去寫，這次可以通過程式調整起始值所以加入了add_to函式庫進行調用。 \n #運算程式\ndef addto(start, end):   #定義函數addto\n    sum_result = 0       #設定數值sum_result=0\n    i = start            #設定i=start\n    while i <= end:      #設結束之值為end\n        sum_result += i  \n        i += 1\n    return sum_result    #終止函數運行並返回數值至result\n    \n#調用程式\nresult = addto(1, 100)   #設定起始值\nprint(result)            #列印result \n addto \n 第三題：只加偶數 \n \u3000\u3000這次可以通過程式調整起始值並讓程式判斷使程式只加偶數數字，邏輯是除以2的餘=0再加入如果不等於0就判定為單數不加入。 \n #運算程式\ndef add_only_even(start, end): #定義函數add_only_eve\n    result = 0                 #在函數內部定義一個區域變數為result\n    num = start                #初始化一個變數為num\u3000並賦值為start\n    while num <= end:          #設定一個while迴圈 循環條件為num <= end只要當前的num沒有超過end就會持續運行\n        if num % 2 == 0:       #這個if判斷式是判斷是否為偶數 餘數是否=0\n            result += num      #此語句為result=result+num\n        num += 1               #每次循環時都將num+1\n    return result              #迴圈結束後使用return返回至函數\nprint(add_only_even(1, 100))   #列印函數結果 \n add_only_even \n 第四題：除了8都加入 \n \u3000\u3000程式邏輯為將透過str指令將整束轉為字符串，再進行判斷裡面是否含有若無則加入倒數列其中 \n def add_avoid_8(start, end):     #定義函數add_only_eve_8\n    result = 0                   #定義函數add_only_eve\n    num = start                  #初始化一個變數為num\u3000並賦值為start\n    while num <= end:            #設定一個while迴圈 循環條件為num <= end只要當前的num沒有超過end就會持續運行\n        num_str = str(num)       #將當前的整數num轉換成字符串的形式透過str語句\n        if '8' not in num_str:   #這是一個if語句他是判斷num_str字符串中是否含8\n            result += num        #此語句為result=result+num\n        num += 1                 #每次循環時都將num+1\n    return result                #迴圈結束後使用return返回至函數     \nprint(add_avoid_8(1, 100))       #列印函數結果 \n add_only_avoid_8 \n", 'tags': '', 'url': 'w15.html'}, {'title': 'w16_exam1', 'text': '\n from browser import document, html\nimport math\n \n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n \nsetup_canvas()\n\n# Set up canvas\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n\n# Set origin (32, 17)\norigin_x, origin_y = 32, 17    #自己學號 修改\n\n# Draw X-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(500, origin_y)\nctx.strokeStyle = "black"\nctx.lineWidth = 2\nctx.stroke()\n\n# Draw Y-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(origin_x, 300)\nctx.stroke()\n\n# Label origin\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(32, 17)", origin_x + 5, origin_y - 5)\n\n# Draw shapes\n# Adjusted placement to fix alignment issue\n\n# Hexagon (Orange)\nhex_x, hex_y = 100, 100\nctx.beginPath()\nfor i in range(6):\n    angle = i * (2 * math.pi / 6)\n    x = hex_x + 30 * math.cos(angle)\n    y = hex_y + 30 * math.sin(angle)\n    if i == 0:\n        ctx.moveTo(x, y)\n    else:\n        ctx.lineTo(x, y)\nctx.closePath()\nctx.fillStyle = "orange"\nctx.fill()\n\n# Diamond (Teal)\nctx.beginPath()\nctx.moveTo(160, 70)\nctx.lineTo(180, 100)\nctx.lineTo(160, 130)\nctx.lineTo(140, 100)\nctx.closePath()\nctx.fillStyle = "teal"\nctx.fill()\n\n# Triangle (Teal)\nctx.beginPath()\nctx.moveTo(165, 130)\nctx.lineTo(205, 130)\nctx.lineTo(185, 100)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n\n# Circle (Pink)\nctx.beginPath()\nctx.arc(230, 100, 30, 0, 2 * math.pi)\nctx.fillStyle = "pink"\nctx.fill()\n\n# Square (Yellow)\nctx.beginPath()\nctx.rect(265, 75, 50, 50)\nctx.fillStyle = "yellow"\nctx.fill()\n\n# Rectangle (Blue)\nctx.beginPath()\nctx.rect(320, 90, 60, 20)\nctx.fillStyle = "Blue"\nctx.fill()\n \n \n Exam1 程式 \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'w16_exam2', 'text': 'from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n\n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 17 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n\n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 17)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y = draw_maze(maze_angle)\n    label_coordinate(ctx, offset_x, offset_y, text_angle)\n \n \n exam2程式 \n \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'w16_exam3', 'text': 'from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n\n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 17 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n\n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "black"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y, pixel_scale\n\n\ndef find_path():\n    # 简单的路径示例，这里假设的路径，实际需要更复杂的算法\n    # 为了维持原本迷宫路线，这里路径假设不破坏迷宫已有路线\n    path = [\n        ((1.5, 0), (1.5, 0.5)),\n        ((1.5, 0.5), (4.5, 0.5)),\n        ((4.5, 0.5), (4.5, 2.5)),\n        ((4.5, 2.5), (3.5, 2.5)),\n        ((3.5, 2.5), (3.5, 1.5)),\n        ((3.5, 1.5), (2.5, 1.5)),\n        ((2.5, 1.5), (2.5, 2.5)),\n        ((2.5, 2.5), (1.5, 2.5)),\n        ((1.5, 2.5), (1.5, 3.5)),\n        ((1.5, 3.5), (3.5, 3.5)),\n        ((3.5, 3.5), (3.5, 4.5)),\n        ((3.5, 4.5), (2.5, 4.5)),\n        ((2.5, 4.5), (2.5, 5))\n    ]\n    return path\n\n\ndef draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):\n    angle_radians = math.radians(angle_degrees)\n    ctx.strokeStyle = "red"\n    ctx.lineWidth = 2\n    for line in path:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 17)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)\n    path = find_path()\n    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n \n exam3程式 \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n <<<<<<< HEAD \n \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': '10.16', 'text': '這周學習使用了由近端啟用coppeliaSim機器人模擬器 \n 並且通過網頁進行預覽 \n \n 1:首先打開近端 找到近端下出現的虛擬硬碟Y: \n \n 2:找到coppeliaSim資料夾把他打開 \n \n 3:往下滑找到coppeliaSim.exe右鍵兩下打開模擬器 \n \n 4:找到模擬方塊的檔案 \n \n 5:找到我們近端的python視窗把丟進去 \n \xa0 \xa0接下來將IP改為自己電腦的IP \n \xa0 \xa0 (可以使用ipconfig指令查找IP) \n \n 6:python端選擇tool按go模擬器會開始運作 \n \n 7:選擇modules找到視覺化處理器打開 \n \n 8:輸入電腦IP並加上端口:23020即可線上預覽模型 \n \n 網址： http://ryanpi.asuscomm.com:23020/ \n \n', 'tags': '', 'url': '10.16.html'}, {'title': '10.09', 'text': '這周習得了三套基礎程式 \n 1:\xa0 \n #單行註解\n#help(print)\n\'\'\'引號區域被視為多行註解\n\'\'\'\na="一個字串"\na=24\na=24.5\nprint(a)\nb=print(a,a,a,sep=\'*\')\nprint(b)\n \n help指令可以使python告訴我們他的相關訊息 \n help_print.py \n \n 2: \n #help(range)\n\nfor i in range(1,6,2):\n    print(i)\n \n for迴圈可以讓程式重複運行 \n help_range.py \n 3: \n # 設定金字塔的高度\nheight = 5\n# 使用 for 迴圈列印金字塔\nfor i in range(height):\n    # 列印空格\n    print(\'\u3000\' * (height - i - 1 + 2), end=\'\')  # 增加 2 個空格\n    # 列印星號\n    print(\'＊\' * (2 * i + 1))\n \n \n 這一套是請AI寫出來的 \n 他是使用*字號排列出五行高的金字塔 \n help_triangle.py \n \n', 'tags': '', 'url': '10.09.html'}, {'title': 'local deployment', 'text': '\n 10/15 11:50本地部屬成功 \n 網址：http://ryanpi.asuscomm.com:8080 \n 此次更新將運行主要運行主機更改為自己的虛擬機 \n 避免被github虛擬機時間所限制 \n \n \n \n \n \n \n', 'tags': '', 'url': 'local deployment.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};